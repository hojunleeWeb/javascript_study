//C는 문자열 타입을 제공하지 않고 문자(char)의 배열로 문자열을 표현하고
//자바는 문자열을 객체 String으로 표현한다
//자바스크립트의 문자열은 원시 타입이며, 이는 변경 불가능한(immutable) 값이다.

//es6부터 템플릿 리터럴이라는 새로운 문자열 표기법이 도입되었다. 템플릿 리터럴은 백틱(`)으로 문자열을 감싸 사용하며
//멀티라인 문자열, 표현식 삽입, 태그드 템플릿 등의 기능을 제공한다.
var template = `Template literals are string literals allowing embedded expressions.`;
console.log(template);

//표현식을 삽입하려면 ${}으로 표현식을 감싸준다. 이때 표현식의 평가 결과가 문자열이 아니더라도 문자열로 강제 변환되어 삽입된다.
var first = "Ung-mo";
var last = "Lee";

console.log(`My name is ${first} ${last}.`);

//undefined는 개발자가 의도적으로 할당하기 위한 값이 아니라 자바스크립트 엔진이 변수를 초기화 할때 사용하는 값이다
//변수를 참조했을때 undefined가 반환된다면 값이 할당된적이 없는, 초기화되지 않은 변수라는것을 알 수 있다.
//이때문에 undefined를 의도적으로 반환하는 경우 혼란을 야기할 수 있으므로 권장되지 않으며
//값이 없다는 것을 의미하기 위해서는 null을 할당시ㅣㄴ다
//ECMAScript 사양에서는 변수는 선언한다(declare)라고 표현하고 함수는 정의한다(define)이라고 표현한다.

var foo = `Lee`;

//이전 참조를 제거하기 위해서는 foo에 null을 할당한다.
//이는 foo 변수가 Lee라는 값이 저장된 메모리 주소로의 참조를 명시적으로 제거하는 것을 의미하며 js 엔진은 누구도 참조하지 않는
//메모리 공간에 대해서는 가비지 콜렉션을 적용할 것이다.
//유용해 보이지는 않는다. 이는 우리가 더이상 본래의 `Lee`라는 값을 사용하지 않는다는 것을 의미하므로
//변수의 스코프를 좁게 만들어 변수 자체를 저절로 소멸시키는 것이 낫다
foo = null;

//함수가 유효한 값을 반환할 수 없는 경우 명시적으로 null을 반환하기도 한다.
